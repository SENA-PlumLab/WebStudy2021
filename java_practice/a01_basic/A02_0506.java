package javaexp.a01_basic;

public class A02_0506 {

	static int made2X (int i) {
		return i*2;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
	
	/*
1. Java 프로그램 설정 순서
	jdk 설치 - cmd에서 version 확인
	eclipse 설치 - preference 에서 encoding을 UTF-8로 설정
	eclipse에서 설치 경로와 workspace 경로는 따로 설정
	
2. sysout + ctrl + space : System.out.println(); 단축키
   ctrl + alt + 화살표 아래 : 줄 복사
   ctrl + shift + F11 : Run
   ctrl + F11 : 디버그 실행
   
3. // 한 줄 주석
   / * ~ * /  여러 줄 주석
    */
		
//4.
	int num00 = 5;
	int num01 = 6;
	String today = "5월 6일";
	System.out.println(num00+num01+" 오늘은 "+today);
   
//5. 
	System.out.println("더하기+: "+num00+" + "+num01+" = "+(num00+num01));
	System.out.println("빼기-: "+num00+" - "+num01+" = "+(num00-num01));
	System.out.println("곱하기*: "+num00+" * "+num01+" = "+(num00*num01));
	System.out.println("나누기/: "+num00+" / "+num01+" = "+(num00/num01));
	System.out.println("나머지%: "+num00+" % "+num01+" = "+(num00%num01));
   
//6.
/* AND && : A && B (A 그리고 B)
 * OR || : A || B (A 혹은 B)
 * Equal == : A == B (A = B인지 비교)
 */

//7.
/* if (조건문) {조건이 true일 때 실행되는 내용} elseif (조건문2) {실행2} else {실행3}
 * switch(변수){
 * 		case 값01: 변수==값01일 때 실행되는 내용. break;
 * 		case 값02: 변수==값02일 때 실행되는 내용. break;
 * }
 * switch 앞에 do { 일단 한 번 실행되는 내용 } 을 붙이기도 함
 */	
	int age = 18;
	if (age >= 20) {
		System.out.println(age+"세는 성인입니다.");
	}else {
		System.out.println(age+"세는 미성년자입니다.");
	}
   
   
	
//8
/* for ( 변수; 변수에 대한 조건문; 변수에 대한 연산){
 * 		변수에 대한 조건문이 참일 때 실행되는 내용
 * }
 * 
 */
	for (int i = 1; i<=20; i +=2) {
		System.out.println(i);
	}
	
//9
/* 기본 변수는 사이즈가 객체변수에 비해 작은 편이며 Stack 영역에 바로 할당된다.
 * 객체 변수는 사이즈가 비교적 큰 편이고, heap 영역에 값이 할당되고 Stack 영역에는 주소값만 저장된다.
 */
	
//10
/*  리턴데이터형식	메소드명 ( 매개변수 ){
 * 		실행할 내용
 * 		return 데이터가 있을 경우 선언한 형식에 맞춰야 한다.
 * }
 * 
 */
	
	
//11
/* 데이터형[] 변수명 = new 데이터형[배열값갯수];
 * 데이터형[] 변수명 = {값1, 값2, ...};
 * 
 */
	String[] food = {"돼지고기", "소고기", "양고기"};
	System.out.println(food);
	}


}





/*

1. 모듈화란 무엇이고 왜 필요로 할까
	프로그램의 재활용, 효과적인 메모리 사용을 위해 사용 된다
	메서드를 통해서 기능을 선언하였다가 해당 메서드를 호출하면 그 기능이 수행되게 처리
	여러개의 메서드, 여러개의 속성이 모여서 모듈화를 처리하는 것이 클래스/객체이다.
	클래스가 여러개 모여서 처리하는 단위가 패키지 
		==> 패키징화 하여 처리하는 프로그램 *.jar로 프로그램을 모듈단위로 처리하며 모여서 프레임웍으로 사용된다.
2. 자바에서 메서드는 어떤 용도로 활용될까?
	리턴타입 메서드명(입력값){
		//필요한 프로세스 처리
		return 리턴;
	}
	모듈화의 첫 단계로 자주 사용되는 기능 코드를 선언하여, 메서드명(입력값) 형식으로 호출하는 것을 말한다.
	자바에서 메서드는 클래스의 구성요소로 사용된다.
3. 자바의 코드와 실제 수행되는 영역의 차이점
	코드는 class로 선언 되어 있는 것을 말하고.
	class에 선언된 코드가 메모리에 로딩되어 수행되는 것을 객체라고 한다.
	class와 객체는 밀접한 연관관계를 가지고있다.
	
	class로 만들어진 소스 자체로는 프로그램 처리를 하지 못 한다.
	비유로 건물의 도면과 같은 역할을 한다.
	하나의 도면으로 여러개의 건출묵을 만들 수 있나...?
	하나의 클래스로 여러개의 객체를 만들 수 있다네~~
	
4. 클래스의 구성 요소

5. 프로그램에서 보안이란 어떤 용도로 쓰일까요?
	적절한 범위에서 접근이 필요하게 처리
	메모리, 데이터 접근
	프로그램도 특정한 메모리의 데이터는 한정된 범위 내에서 처리하지 않으면 문제가 발생한다.
	


------------------------------
11. 쓰레드 (다중 작업)
하나의 컴퓨터에서 여러개의 프로그램을 수행(프로세스)
하나의 프로그램에서 여러 

12.
13.
14. 컬렉션 프레임워크
15. IO 입출력
	필수 예외처리를 하여야 한다.
	1) 스트림 병렬 처리
	2) IO기반 입출력
	3) NIO기반 입출력
16. 화면 처리 fx/jsp/안드로이드






*/