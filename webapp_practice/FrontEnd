# FrontEnd
1. 웹에서 client 파트의 프로그램을 처리하는 것을 말한다.
2. 순서
	1) 환경설정 
		- 웹 encoding 처리
		- 웹서버 연동 화면 출력
	2) 전체적인 knowledgeMap 정리
3. html부터 시작?
	0) html ==> css 			-->javascript
		==> bootstrap			-->jquery
		==> bootstrap template	-->jsp 수업 후 ajax
								-->vue 
	1) html의 구성요소
		- html 태그
		- css: html 상단에 포함하거나 .css 외부파일로 저장 후 호출함
		- javascript: .js파일로 외부파일 호출
						head, body중앙과 doby하단에 <script> 처리
	2) html 기본
		- 타이틀 h1~h6
		- 문단 paragraph <p>...
		- 텍스트 꾸미기 태그: 진하게, 강조, 삭제, 추가, 윗첨자/아래첨자
			<b><del>...<insert>...
		- 블럭 태그: 태그가 줄바꿈 포함 h1, div
		- 인라인 태그: 줄바꿈없이 한라인으로 명령 ... span, img
		- 이미지: img
			src="이미지경로+파일명", width="픽셀수"
		- list: <ul><li>, <ol><li>
		- table: 2차원 데이터 표현에 사용. 타이틀, 내용을 효과적으로 정렬.
			<table> <tr> <td> ... </td> </tr> </table>
		- link: 외부문서나 내부에 연결 ... 
			- <a href="">: 특정한 메뉴나 기능을 클릭 시, 해당 페이지로 이동 처리
			- download 처리
		- 화면 구분 처리
			- div, frame, iframe
			- 위에 hyperlink와 연동하여 메뉴별 페이지 이동
			- html5 semantic 태그: 화면 구분
		- form 하위 여러 요소객체 사용
			<input type="text"> 데이터를 입력해서 서버에 전송할 때 주로 사용
			<input type="checkbox"> check 멀티선택
			<input type="radio"> check 단일선택
			<input type="button"> 기본화면에서 출력할 버튼
			<select> 콤보로 선택할 때...
			<textarea> 여러 라인으로 데이터 입력시..
						
			
4. css
	기본 html을 바탕으로 크기나 모양 색상을 효과적으로 처리해줌
	css3 동적인 처리 가능하고 3D모양 기능 처리
	
	1) 선언방법
		- inline
			해당 태그에만 바로 적용 처리
			<태그 style="속성:속성값..." />
			ex) <h2 style="background-color:yellow"/>
		- head 부분에 선언
			선택자{속성1:속성값1;속성2:속성값2....}
	2) 선택자 selector
		- body 안에 선언된 태그들을 기본적으로 선택해서 속성으로 색상, 굵기, 크기, 이벤트 등을 처리
		- #아이디속성{}, .클래스속성{}, 기본태그{}
		- [속성=속성값]{}
		- :{} - 가상선택자..
	3) 여러가지 속성들..
		- margin: 여백
		- color: 글자색
		- text-XXX 관련 속성
		- font-XXX: 문자체에 대한 속성
		- box 관련 속성: margin, border, padding, contents
		- css3 속성: border-radius
		- background-XXX: 배경 속성
		- 줄바꿈: display - block, inline, inline-block
		- 위치관련: position
		- visibility
		- overflow
		
		
5. javascript
	위의 html을 통해 선언된 화면의 구성요소들에 함수나 객체화를 통해서 동적인 처리(event)를 함.
	위 내용을 처리하기 위해서는 기본적인 프로그래밍 기술과 이해를 바탕으로 한다.
	
	1) javascript 선언과 로딩 위치
	2) 기본 문법
		- 변수 선언 규칙: 데이터유형이 초기에 선언되지 않음.
						==> 데이터를 할당하는 순간 해당 변수의 데이터유형이 결정됨.
						데이터유형: 숫자형, 문자열형, boolean, 함수형, 객체형(배열포함)
		- 데이터 할당
		- 주석처리
		- 입력: alert, document.write, console.log("");
		- 출력: prompt, confirm
		- 기타 프로그램 기초: 연산자 종류
		- 형변환 
	3) 조건/반복문
		- if, for
			var arry=["사과", "바나나", "딸기"];
			var obj={name:"홍길동", age:25, loc="서울강남"}; //java와 차이 있음
			for(var idx in arry){
				// idx: 데이터 유형도 문자열을 index값으로 받는다. '0', '1', '2', ...
				arry[idx]: 각 단위 데이터 "사과", "바나나"...
			}
			for(var prop in obj){
				// prop: 문자열로 속성 "name", "age", "loc"
				obj[prop]: 속성값을 가져온다. "홍길동", 25, "서울강남"
			}
			
			
		- switch
		- 삼항연산자
	4) 함수처리
		- 선언적 함수
			function 함수명(){
				함수호출처리...
			}
		- 변수형 함수
			var 함수명 = function(){};
	5) 객체
		- 생성자형 객체
			function 객체명(){
				this.속성=속성값;
				this.속성=속성값;
				this.속성=function(){
				}
			}
			var p01 = new 객체명();
			p01.속성; //일반필드
			p01.속성(); //메소드
		- json(javascript object notation)
			var p02 = {속성:속성값, 속성:function(){}}
			p02.속성;
			p02.속성();
		- class 클래스명{ - ecma6 이후 버전 지원
			}
		- 내장객체
			String: split(), substring()
			Date: 날짜..
			Array: 배열
			Math: 올림 반올림 내림 랜덤 (java와 동일)
		
	6) DOM(document object model)
		- 화면에서 구현된 태그들을 객체화하여 속성을 변경하거나 메소드를 처리하여 동적인 화면 구현 처리
		- 대상객체 지정 형식
			var obj = documnet.querySelector("선택자");
			var arry = document.querySelectorAll("선택자);
			# 선택자
			1. 태그
			2. #아이디명
			3. .클래스명
			----------
			4. [속성=속성값] <input name="id"/>
				vat idObj = document.querySelector("[name=id]");
				idObj.value;
				
	7) BOM(Browser Object Model)
		- 브라우저 클릭 시 로딩되는 브라우저 전체 화면을 처리할 때 사용
		- var win01 = window.open("소스(파일명)", "", "옵션");
			옵션: 브라우저의 크기, 타이틀, status 등등..
		- 기능: resizeBy(), moveBy(), moveTo()...
		
	8) 이벤트 처리
		- 대상객체: DOM 지정
		- 이벤트 함수 선언: 이벤트를 통해 수행할 내용을 함수로 정의.
		- 이벤트 처리: 클릭, 마우스오버, 마우스아웃...
			key 입력.
		ex) 사람(대상객체), 속성(듣기 이벤트), 듣고나서 행동(이벤트 핸들러 함수)
			
			function call(){ ..}
			<h2 onclick="call()"> 클릭 </h2>
			
			var h1Obj = document.querySelector("h1");
			h1Obj.onclick=function(){
				//익명함수 처리 코드
			};
			
	9) 예외처리
		try{
			예외가 날만한 코드
		}catch(exception){
			예외가 발생했을 때 처리할 코드
		}finally{
			예외 발생여부와 관계없이 처리해야하는 코드
		}
	10) 기타 유틸리티
		- 정규표현식: frontend단에서 유형성 check시 많이 활용되는 표현방식
		1. 코드방식
			new RegExp('text')
			/text/	
		2. 정규 표현식 객체 메소드
			text(): 일치하는 문자열이 있으면 true/false
			exec(): 일피하는 문자열 자체
		3. String 객체 메소드
			match(정규표현식): 일치부분
			replace(정규표현식, 바꿀내용) 일치 부분을 새로운 무자열로 변경
			search(정규표현식): 일치부분 위치
			split(정규표현식): 문자열을 잘라 배열 패턴으로 처리
		- 구글맵 api 활용
		- 브라우저의 저장소 Cookie
		
			